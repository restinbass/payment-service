// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	business "github.com/restinbass/payment-service/internal/service/model"

	mock "github.com/stretchr/testify/mock"
)

// PaymentTransactionService is an autogenerated mock type for the PaymentTransactionService type
type PaymentTransactionService struct {
	mock.Mock
}

type PaymentTransactionService_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentTransactionService) EXPECT() *PaymentTransactionService_Expecter {
	return &PaymentTransactionService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *PaymentTransactionService) Create(ctx context.Context, req business.CreatePaymentTransactionRequest) (business.CreatePaymentTransactionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 business.CreatePaymentTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, business.CreatePaymentTransactionRequest) (business.CreatePaymentTransactionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, business.CreatePaymentTransactionRequest) business.CreatePaymentTransactionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(business.CreatePaymentTransactionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, business.CreatePaymentTransactionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentTransactionService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PaymentTransactionService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req business.CreatePaymentTransactionRequest
func (_e *PaymentTransactionService_Expecter) Create(ctx interface{}, req interface{}) *PaymentTransactionService_Create_Call {
	return &PaymentTransactionService_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *PaymentTransactionService_Create_Call) Run(run func(ctx context.Context, req business.CreatePaymentTransactionRequest)) *PaymentTransactionService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(business.CreatePaymentTransactionRequest))
	})
	return _c
}

func (_c *PaymentTransactionService_Create_Call) Return(_a0 business.CreatePaymentTransactionResponse, _a1 error) *PaymentTransactionService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentTransactionService_Create_Call) RunAndReturn(run func(context.Context, business.CreatePaymentTransactionRequest) (business.CreatePaymentTransactionResponse, error)) *PaymentTransactionService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentTransactionService creates a new instance of PaymentTransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentTransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentTransactionService {
	mock := &PaymentTransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
